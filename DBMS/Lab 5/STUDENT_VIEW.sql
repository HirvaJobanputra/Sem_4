-- create view personal with all columns
CREATE VIEW PERSONAL
AS
SELECT * FROM STUDENT

-- CREATE A VIEW STUDENT_DETAILS having COLUMNS NAME, BRANCH AND SPI
CREATE VIEW STUDENT_DETAILS
AS
SELECT NAME, BRANCH, SPI FROM STUDENT

-- CREATE A VIEW ACADEMIC HAVING COLUMNS RNO, NAME AND BRANCH
CREATE VIEW ACADEMIC
AS
SELECT RNO, NAME, BRANCH FROM STUDENT

--CREATE A VIEW STUDENT_DATA HAVING ALL COLUMNS BUT STUDENTS WHOSE BACKLOGS ARE MORE THAN 2
CREATE VIEW STUDENT_DATA 
AS 
SELECT * FROM STUDENT
WHERE BKLOG>2

-- CREATE A VIEW STUDENT_PATTERNS HAVING RNO, NAME, AND BRANCH COLUMNS IN WHICH NAME CONSISTS OF FOUR LETTERS
CREATE VIEW STUDENT_PATTERNS
AS 
SELECT RNO, NAME, BRANCH FROM STUDENT
WHERE NAME LIKE '____'

--PART -2
--INSERT A NEW RECORD TO ACADEMIC VIEW (107, MEET, ME). REMAINING ALL COLUMNS MUST BE NULL
INSERT INTO ACADEMIC (RNO,NAME,BRANCH)
VALUES(107,'MEET','ME')

--UPDATE THE BRANCH OF AMIT FROM CE TO ME IN STUDENT DETAILS VIEW
UPDATE STUDENT_DETAILS
SET BRANCH='ME'
WHERE NAME='AMIT'

-- DELETE A STUDENT WHOSE ROLL NUMBER IS 104 FROM ACADEMIC VIEW
DELETE FROM ACADEMIC
WHERE RNO=104

-- CREATE A VIEW THAT DISPLAYS INFORMATION OF ALL STUDENTS WHOSE SPI IS ABOVE 8.5
CREATE VIEW TOPPERS
AS
SELECT NAME,SPI FROM STUDENT
WHERE SPI>8.5

-- CREATE A VIEW THAT DISPLAYS 0 BCKLOG STUDENTS
CREATE VIEW NOBCKLOG
AS
SELECT NAME,BKLOG FROM STUDENT
WHERE BKLOG=0


-- PART C
-- CREATE A VIEW COMPUTER THAT DISPLAYS CE BRANCH DATA ONLY
CREATE VIEW COMPUTER 
AS 
SELECT * FROM STUDENT
WHERE BRANCH='CE'

--CREATE VIEW RESULT_EC THAT DISPLAYS THE NAME AND SPI OF STUDENTS WITH SPI LESS THAN 5 OF BRANCH EC.
CREATE VIEW RESULT_EC
AS 
SELECT NAME,SPI FROM STUDENT
WHERE SPI<5 AND BRANCH='EC'

--UPDATE THE RESULT OF STUDENT SANJAY TO 4.90 IN RESULT_EC VIEW
UPDATE RESULT_EC
SET SPI=4.90
WHERE NAME='SANJAY'

--CREATE A VIEW STU_BACKLOG WITH RNO, NAME, AND BACKLOG COLUMNS IN WHICH NAME STARTS WITH 'M'
--AND HAVING BCKLOGS MORE THAN 5
CREATE VIEW STU_BACKLOG 
AS 
SELECT RNO, NAME, BKLOG FROM STUDENT
WHERE NAME LIKE 'M%' AND BKLOG>5
-- DROP COMPUTER VIEW FROM DATABASE
DROP VIEW COMPUTER


---------------------------------------------------------------------------------------------
--COMPLEX VIEW
CREATE TABLE CUSTOMER(
	CUSTOMERID INT PRIMARY KEY,
	FIRSTNAME VARCHAR(50) NOT NULL,
	LASTNAME VARCHAR(50) NOT NULL
)

INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME, LASTNAME)
VALUES(1, 'JHON', 'DOE')
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME, LASTNAME)
VALUES(2, 'JANE', 'SMITH')
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME, LASTNAME)
VALUES(3, 'MICHAEL', 'JHONSON')
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME, LASTNAME)
VALUES(4, 'MARK', 'WOOD')
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME, LASTNAME)
VALUES(5, 'MOIN', 'KHAN')

CREATE TABLE ACCOUNT(
	ACCOUNTID INT PRIMARY KEY,
	CUSTOMERID INT FOREIGN KEY REFERENCES CUSTOMER(CUSTOMERID),
	BALANCE DECIMAL(10,2) NOT NULL,
	ACCOUNTTYPE VARCHAR(50) NOT NULL,
	CREATEDDATE DATE NOT NULL
	)

--PART-A
--CREATE A VIEW THAT DISPLAYS ALL THE CUSTOMERS ALONG WITH THEIR CORRESPONDING ACCOUNT BALANCES
CREATE VIEW ACC_BALANCE
AS
SELECT CUSTOMER.FIRSTNAME, ACCOUNT.BALANCE FROM ACCOUNT
INNER JOIN CUSTOMER
ON CUSTOMER.CUSTOMERID=ACCOUNT.CUSTOMERID

--CREATE A VIEW THAT DISPLAYS TOTAL BALANCE FOR EACH CUSTOMER
CREATE VIEW TOTAL_BALANCE
AS 
SELECT CUSTOMER.CUSTOMERID, SUM(ACCOUNT.BALANCE) FROM ACCOUNT
INNER JOIN CUSTOMER
ON CUSTOMER.CUSTOMERID=ACCOUNT.CUSTOMERID
GROUP BY CUSTOMER.CUSTOMERID

--CREATE A VIEW THAT DISPLAYS CUSTOMERS WHO HAVE MULTIPLE ACCOUNTS
CREATE VIEW MULTIPLE_ACCOUNTS
AS
SELECT CUSTOMER.FIRSTNAME FROM CUSTOMER
INNER JOIN ACCOUNT
ON CUSTOMER.CUSTOMERID=ACCOUNT.CUSTOMERID
WHERE ACCOUNTID>1

--PART-B
-- CREATE A VIEW THAT DISPLAYS CUSTOMER DETAILS WHO HAVE AN ACCOUNT CREATED IN THE LAST MONTH
CREATE VIEW LASTMONTH
AS
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME FROM CUSTOMER
INNER JOIN ACCOUNT
ON CUSTOMER.CUSTOMERID=ACCOUNT.CUSTOMERID
WHERE ACCOUNT.CREATEDDATE>DATEADD(MONTH,-1,GETDATE())

-- CREATE A VIEW THAT DISPLAYS CUSTOMERS WHO HAVE THE HIGHEST ACCOUNT BALANCE
CREATE VIEW HIGHEST_BALANCE
AS
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, ACCOUNT.BALANCE FROM CUSTOMER
INNER JOIN ACCOUNT
ON CUSTOMER.CUSTOMERID=ACCOUNT.CUSTOMERID
WHERE ACCOUNT.BALANCE=(SELECT MAX(BALANCE) FROM ACCOUNT)

-- PART C
-- CREATE A VIEW THAT DISPLAYS NAME OF THE CUSTOMERS WHOSE ACCOUNT BALANCE IS BETWEEN 5000 TO 10000 AND ACCOUNT TYPE IS SAVING
CREATE VIEW SAVING
AS
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, ACCOUNT.BALANCE FROM CUSTOMER
INNER JOIN ACCOUNT
ON CUSTOMER.CUSTOMERID = ACCOUNT.CUSTOMERID
WHERE ACCOUNT.BALANCE>5000 AND ACCOUNT.BALANCE>10000

-- CREATE A VIEW THAT DISPLAYS MINIMUM AND MAXIMUM BALANCE FOR EACH CUSTOMER

CREATE VIEW MINMAX
AS 
SELECT MIN(ACCOUNT.BALANCE) AS MINIMUM, MAX(ACCOUNT.BALANCE) AS MAXIMUM, CUSTOMER.CUSTOMERID FROM CUSTOMER 
INNER JOIN ACCOUNT
ON CUSTOMER.CUSTOMERID = ACCOUNT.CUSTOMERID
GROUP BY CUSTOMER.CUSTOMERID






